---
title: "Development"
---

## Debug mode

"Debug mode" outputs the computed JavaScript plot structure (the one passed to `Plot.plot`).

To activate it, add `debug=True` when creating your plot generator object:

```{python}
# | eval: false
op = Obsplot(render="widget", debug=True)
```

If using the `widget` renderer, debug output will be displayed in JavaScript console. With the `jsdom` renderer, it will be displayed directly in the notebook.

## Install from git

To install `pyobsplot` from git:

```sh 
pip install git+https://github.com/juba/pyobsplot.git
```

To install `pyobsplot` npm package from git:

```sh
npm install github:juba/pyobsplot-js
```

## Install fom source

If you want to build `pyobsplot` from source, you'll have to follow these steps:

- Install [node.js](https://nodejs.org/en)
- Install [poetry](https://python-poetry.org) dependency management system
- Clone the [pyobsplot](https://github.com/juba/pyobsplot) repository
- Install Python dependencies with : `poetry install`
- Install `pyobsplot` JavaScript dependencies with : `npm install`
- Clone the [pyobsplot-js](https://github.com/juba/pyobsplot) repository in the same folder as the `pyobsplot` repository
- Install `pyobsplot-js` dependencies with : `npm install`

The `widget` renderer uses the [anywidget](https://anywidget.dev) Jupyter widget framework. Python source code is in `src/pyobsplot/widget.py`. JavaScript and CSS source code is in `js/` and `css/`.

The `jsdom` renderer is provided by `pyobsplot-js`. Python source code is in `src/pyobsplot/jsdom.py` in `pyobsplot`.

## Widget JavaScript modification and bundling

Each time the widget JavaScript or CSS code is modified in the `js/` or  `css/` directories, it must be bundled with one of the following commands in `pyobsplot`:

```sh
# Bundle only once
npm run bundle
# Bundle and watch for code change
npm run watch
```

The result is put into `src/pyobsplot/static`. 

## Tests

`pyobsplot` comes with three types of tests : Python test, JavaScript tests and Visual regression tests.

- to run Python tests, use `npm run test` in `pyobsplot`
- to run JavaScript tests, use `npm run test` in `pyobsplot-js`

Visual regression tests allow to test if generated plots stay the same. They use the [galata](https://github.com/jupyterlab/jupyterlab/tree/master/galata) framework. To run them you first have to start a specific Jupyter instance with:

```sh
npm run uistart
```

If you use visual regression tests for the first time, you have to generate reference images with:

```sh
# Create / update reference images
npm run uitest:update
```

After that, you can test that currently generated images are the same as the reference one with:

```sh
# Compare with reference images
npm run uitest
```

## Maintenance notes

### Releases

- If necessary release the npm package with `npm publish` in `pyobsplot-js`
- Check that the min_npm_version value in .utils is correct
- Release the Python package with `poetry build` and `poetry publish` in `pyobsplot`
- Create a release on Github

### New Plot versions

When a new Plot version is released:

- update with `npm install @observablehq/plot` and `npm install d3` for both `pyobsplot` and `pyobsplot-js`
- run `utils/get_plot_methods.js` and update `utils.py` in `pyobsplot`