---
title: "Getting started"
---

## Installation

`pyobsplot` can be installed with `pip`:

```sh
pip install pyobsplot
```

If you want to use the [`jsdom` renderer](usage.qmd#renderers), you must have a working installation of [node.js](https://nodejs.org/en) and you must install the following package globally or locally:

```sh
# Install locally
npm install pyobsplot
# Install globally
npm install -g pyobsplot
```

## Usage

To use `pyobsplot`, you must import at least its `Obsplot` and `Plot` classes with:

```{python}
from pyobsplot import Obsplot, Plot

```

The next step is to create a *plot generator object* with `Obsplot()`. Here we call it `op` but you can use any name you want:

```{python}
# | eval: false
op = Obsplot()
```

```{python}
# | echo: false
op = Obsplot(renderer="jsdom")
```


To create a plot, you call your plot generator object and pass it a plot specification as argument. The simplest specification form is a Python dictionary with a syntax nearly identical as the JavaScript one. 

So, starting with a very simple DataFrame:

```{python}
import polars as pl

data = pl.DataFrame(
    {
        "x": [1, 5, 2, 4, 6, 2, 4],
        "y": [2, 1, 3, 4, 5, 1, 2],
        "type": ["T1", "T2", "T1", "T2", "T1", "T1", "T2"],
    }
)
```

If your JavaScript plot function looks like this:

```javascript
Plot(
    {
        grid: true,
        marks: [Plot.dot(data, {x: "x", y: "y", fill: "type", r: 5})]
    }
)
```

Then you can reproduce the plot with:

```{python}
op(
    {
        "grid": True,
        "marks": [Plot.dot(data, {"x": "x", "y": "y", "fill": "type", "r": 5})],
    }
)
```

The syntax here is almost identical, except that dictionary keys must be quoted, and JavaScript `true` must be replaced by Python `True`.

You can use pandas and polars DataFrames as data sources, they are automatically serialized and passed to JavaScript via Arrow IPC format:

```{python}
penguins = pl.read_csv("data/penguins.csv")

op(
    {
        "grid": True,
        "color": {"legend": True},
        "marks": [
            Plot.dot(
                penguins,
                {"x": "flipper_length_mm", "y": "body_mass_g", "fill": "island"},
            )
        ],
    }
)
```

For the simplest cases, you can also create your plot directly by passing a `Plot` mark method:

```{python}
op(Plot.auto(penguins, {"x": "flipper_length_mm"}))
```

By default, plots will be created as [Jupyter widgets](https://ipywidgets.readthedocs.io/en/stable/). This allows for [(very basic) interactivity](usage.qmd#interactivity), but also generates bigger files. An alternative is to use the [`jsdom` renderer](usage.qmd#renderers), which generates SVG or HTML outputs.

The renderer is determined by passing a `renderer` argument to `Obsplot()` when creating a generator object:

```{python}
# | eval: false
# Switch to widget renderer (default one)
opw = Obsplot(renderer="widget")
# Switch to jsdom renderer
opj = Obsplot(renderer="jsdom")
```


# Learn more

To go further, see the [usage](usage.qmd) page.

