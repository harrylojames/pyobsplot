---
title: "Usage"
---

{{< include _setup.qmd >}}

For a quick usage introduction, see [getting started](getting_started.qmd).

## From JavaScript to Python

Converting a plot specification from JavaScript to Python should be straightforward most of the time:

- all dictionary keys must be quoted (so `x:` becomes `"x":`)
- JavaScript `true` and `false` must be replaced by `True` and `False`
- JavaScript `null` must be replaced by `None`

So for example, the following JavaScript code:

```javascript
Plot(
    {
        color: {legend: true}
        grid: false,
        marks: [Plot.dot(data, {x: "x", y: "y", fill: "type", r: 5})]
    }
)
```

Becomes:

```{python}
#| eval: false
Obsplot({
    "color": {"legend": True}
    "grid": False,
    "marks": [Plot.dot(data, {"x": "x", "y": "y", "fill": "type", "r": 5})],
})
```

It is possible to  replace JavaScript methods from the `Plot`, `d3` and `Math` modules with Python methods, but you must first import the corresponding classes.

```{python}
from pyobsplot import Obsplot, Plot, d3

Obsplot({
    "x": {
        "axis": None
    },
    "marks": [
        Plot.lineY(d3.cumsum({ "length": 100 }, d3.randomNormal()))
    ]
})
```

If your specification includes JavaScript code (such as anonymous functions), you can pass it as a string by using the `js` method (after importing it):

```{python}
from pyobsplot import Obsplot, Plot, d3, js
import polars as pl

data = pl.DataFrame({
    "x": [1, 5, 2, 4, 6, 2, 4],
    "y": [2, 1, 3, 4, 5, 1, 2],
    "type": ["T1", "T2", "T1", "T2", "T1", "T1", "T2"],
})

Obsplot({
    "grid": True,
    "marks": [
        Plot.dot(data, {
            "x": "x", "y": "y", "r": 5,
            "stroke": "black", "fill": "royalblue",
            "fillOpacity": js("d => d.type == 'T1' ? 0.7 : 0.1")
        })
    ]
})
```

## Renderers

`pyobsplot` provides two renderers : `widget` and `jsdom`. The `widget` renderer outputs plots as [Jupyter widgets](https://ipywidgets.readthedocs.io/en/stable/). The `jsdom` renderer uses an external npm package to generate plots as either SVG or HTML.

The following table lists the differences between the two renderers.

<style>
.renderers-table {
    width: 100%;
    text-align: center;
    vertical-align: middle;
}
.renderers-table td,
.renderers-table th {
    width: 19em;
    padding: .5em 2em !important;
}
.renderers-table tbody tr {
    height: 4em;
}
</style>

<table class="table table-striped renderers-table">
<thead>
<tr><th></th><th>widget</th><th>jsdom</th></tr>
</thead>
<tbody>
<tr>
<td>**Output**</td>
<td>Jupyter Widget</td>
<td>SVG (plots without legend)<br>HTML (plots with legend)</td>
</tr>
<tr>
<td>**Additional<br>installation**</td>
<td>None</td>
<td>Needs a working node.js installation and an additional `npm` package</td>
</tr>
<tr>
<td>**Quarto**</td>
<td>Supported only in HTML format</td>
<td>Supported in HTML format, SVG output supported in other formats as well</td>
</tr>
<tr>
<td>**Output size**</td>
<td>Big : includes the data and code needed to generate the plot</td>
<td>Moderate : size of the SVG or HTML output</td>
</tr>
<tr>
<td>**Jupyter<br>interactivity**</td>
<td>Basic</td>
<td>None</td>
</tr>
<tr>
<td>**Persistence<br>between sessions**</td>
<td>Widget state is not saved between session in VSCode</td>
<td>Output is saved between sessions</td>
</tr>
</tbody>
</table>

To use the `jsdom` renderer, you need a working [node.js](https://nodejs.org/en) installtion and you must install the npm `pyobsplot` package globally or locally:

```sh
# Install locally
npm install pyobsplot
# Install globally
npm install -g pyobsplot
```

After that, you can switch between both renderers with:

```{python}
# | eval: false
# Switch to widget renderer (the default one)
Obsplot.set_renderer("widget")
# Switch to jsdom renderer
Obsplot.set_renderer("jsdom")
```


## Alternative syntaxes

As we've already seen, the most common syntax for a plot specification is to pass it as a dictionary :

```{python}
#| eval: false
Obsplot({
    "grid": True,
    "color": {"legend": True}
    "marks": [
        Plot.dot(data, {"x": "x", "y": "y", "fill": "type"})
    ],
})
```

But it is also possible to pass top level arguments as `kwargs` to `Obsplot`, which would give the following:

```{python}
#| eval: false
Obsplot(
    grid = True,
    color = {"legend": True},
    marks = [
        Plot.dot(data, {"x": "x", "y": "y", "fill": "type"})
    ],
)
```

Finally, for the simplest cases, you can also pass a mark method directly to `Obsplot`. The JavaScript `plot()` method will be called automatically to display the plot:

```{python}
import random
Obsplot(
    Plot.tickX(
        [random.gauss(0,1) for i in range(1000)], 
        {"stroke": "royalblue", "opacity": 0.2}
    )
)
```


## DataFrames and Series

Pandas and polars DataFrames can be passed directly to `Obsplot`. They will be converted to JavaScript objects via Arrow IPC serialization, to ensure speed and data types conversion.

```{python}
import polars as pl
from datetime import date

df = pl.DataFrame({
    "Date": [date(2023, 1, 1), date(2023, 1, 2), date(2023, 1, 3), date(2023, 1, 4)],
    "Value": [4.2, 3.8, 4.5, 4.7]
})

Obsplot({
    "x": {"grid": True},
    "y": {"domain": [0, 5]},
    "marks": [Plot.lineY(df, {"x": "Date", "y": "Value", "stroke": "royalblue"})]
})
```

If you pass a pandas or polars Series object, it will be automatically converted to a DataFrame with one column:

```{python}
value = df.get_column("Value")

Obsplot(
    Plot.tickX(value, {"x": "Value", "stroke": "darkviolet"})
)
```

`pyobsplot` implements a simple caching mechanism for some data objects: it currently works for DataFrames and for GeoJson objects.

Sometimes the same data object is used several times in a plot specification, such as:

```{python}
penguins = pl.read_csv("data/penguins.csv")

Obsplot({
  "height": 600,
  "grid": True,
  "facet": {
    "marginRight": 80
  },
  "marks": [
    Plot.frame({"facet": False}),
    Plot.dot(penguins, {
      "x": "culmen_depth_mm",
      "y": "culmen_length_mm",
      "r": 1.5,
      "fill": "#ccc",
      "facet": "exclude",
      "fx": "sex",
      "fy": "species",
    }),
    Plot.dot(penguins, {
       "x": "culmen_depth_mm",
       "y": "culmen_length_mm",
       "fx": "sex",
       "fy": "species",
    })
  ]
})
```

In this case, caching ensures that the `penguins` DataFrame is only serialized and transmitted once instead of three times. 

## datetime objects

`datetime.date` and `datetime.datetime` Python objects are automatically serialized and converted to JavaScript `Date` objects.

That makes the following two specifications equivalent:

```{python}
Obsplot({
    "x": {"domain": [js("new Date('2021-01-01')"), js("new Date('2022-01-01')")]}, 
    "grid": True
})
```

```{python}
from datetime import date
Obsplot({
    "x": {"domain": [date(2021,1,1), date(2022,1,1)]}, 
    "grid": True
})
```

As well as the two following ones, using `datetime`:

```{python}
Obsplot({
    "x": {"domain": [js("new Date('2021-01-01T07:00:00')"), js("new Date('2021-01-01T08:00:00')")]}, 
    "grid": True
})
```

```{python}
from datetime import datetime
Obsplot({
    "x": {"domain": [datetime(2021,1,1,7,0,0), datetime(2021,1,1,8,0,0)]}, 
    "grid": True
})
```


## Interactivity

When using the `widget` renderer, the fact that plots are generated as Jupyter widgets allow for basic interactivity. More specifically, you can set the `spec` attribute of an existing `Obsplot` to another plot specification and it will update it.

This allows to do things like the following, where a plot is updated depending on the value of a Jupyter `IntSlider` widget:

```{python}
#| eval: false
def generate_spec(length):
    return {
        "x": {
            "axis": None
        },
        "y": {
            
        },
        "marks": [
            Plot.lineY(d3.cumsum({ "length": length }, d3.randomNormal()))
        ]
    }


def change_spec(change):
    new_length = change['new']
    p.spec = generate_spec(new_length)


w = IntSlider(value = 100, min = 0, max = 1000)
p = Obsplot(generate_spec(w.value))
w.observe(change_spec, names='value')
display(w)
p
```


## Quarto

`Obsplot` plots are compatible with [quarto](https://quarto.org) HTML formats. If you use the [jsdom renderer](#renderers), plots without legends are generated as SVG files and are also compatible with other formats such as PDF or docx.

If your source document is a jupyter notebook (and not a `.qmd` file), then you have to use the `--execute` argument to force plot computation and to make them visible in the output:

```sh
quarto render test.ipynb --execute --to html
```

